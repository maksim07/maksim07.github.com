---
layout: post
title: "Bash QL: Часть 1 - Основные команды"
date: 2012-12-19 10:41
comments: true
categories: [bash, data analysis, linux, bash ql]
---
Среди команд Linux есть много инструментов, которые можно эффективно использовать для
извлечения и анализа данных. Можно сказать, что эти команды образуют язык запросов - bash query language.
На этом языке можно разрабатывать целые программы по обработке данных, его очень просто использовать - 
для этого достаточно открыть терминал. В этой статье я расскажу о базовых командах Bash QL, более подробную
информацию о них можно найти в мануалах Linux.

<!--more-->

Для иллюстрации возможностей Bash QL рассмотрим два примера. В обоих случаях анализируется лог web-сервера, 
например nginx:

{% codeblock фрагмент лога %}
...
127.0.0.1 - - [07/Mar/2004:16:06:51 -0400] "GET /index.html HTTP/1.1" 200 4523
10.10.0.1 - - [07/Mar/2004:16:06:52 -0400] "GET /main.html HTTP/1.1" 200 42234
10.10.0.21 - - [07/Mar/2004:16:06:53 -0400] "GET /01.html HTTP/1.1" 200 14234
...
{% endcodeblock %}

Полезный отчет, который можно получить по этому логу - выявление ботов на основании количества запросов, 
сделанных с одного IP-адреса. Например, будем считать, что если с одного IP сделано больше 1000 запросов, то это робот.

{% codeblock выявление ботов lang:bash %}
$ cat access.log | awk '{print $1}' | sort | uniq -c | awk '{if($1 > 1000) print $0}' | sort -n
2311 10.0.0.10
14351 10.0.0.11
53312 127.0.0.1
{% endcodeblock %}

В этом примере мы получили ip-адреса трех ботов и количество сгенерированных ими запросов к web-серверу.

В следующем примере по логам формируется отчет по ошибкам:

{% codeblock отчет по ошибкам http lang:bash %}
$ cat access.log | awk '{if ($9 != 200) print $9}' | sort | uniq -c | sort -n
12 500
3234 404
{% endcodeblock %}

Команды Bash SQL можно разделить на две категории: команды получения и анализа данных. 
Запрос на Bash QL начинается с команды получения данных и содержит несколько команд анализа данных, который объеденены 
в конвейер. В предыдущем примере запрос начинается командой __cat__, данные которой обрабатываются 
командами анализа данных __awk__, __sort__ и __uniq__.

{% blockquote %}
QUERY ::= DATA_COMMAND (| ANALYSIS_COMMAND)* [> OUTPUT_FILE]
{% endblockquote %}

Далее перечислены основные команды из обеих категорий. 

## Команды анализа данных

Будем считать, что всем этим командам этой категории данные передаются на стандартный ввод, 
хотя большинство из них можно использовать и иначе. 
Результат своей работы эти команды отправляют на стандартный поток вывода.

### sort

Эта команда позволяет отсортировать строки исходного файла. Если указать флаг __-n__, то строки будут сортироваться в соответствие
со своим числовым значением. Можно сортировать по одному полю или по диапазону полей при помощи опций __-k POS__ и __-t SEP__. Для обратной 
сортировки есть флаг __-r__.
По умолчанию, исходный файл воспринимается как таблица с одной колонкой.

{% codeblock пример сортировки (по возрасту) lang:bash %}
$ cat example.txt
Ivan Ivanov 23
Petr Petrov 43
Sergey Sidorov 17
$ cat example.txt | sort -n -k 3 -t " "
Sergey Sidorov 17
Ivan Ivanov 23
Petr Petrov 43
{% endcodeblock %}

### uniq

Если в исходном файле строка повторяется, то эта команда оставит только одну из повторяющихся строк. С флагом __-c__ в вывод команды 
также добавляется количество повторяющихся слов.

### head & tail

Команды позволяют получить начало или конец исходного файла. Атрибут __-n COUNT__ позволяет указать количество строк.

### grep

Пожалуй, самая популярная команда для анализа данных. Она позволяет отфильтровать исходный файл - оставить в нем только те строки, которые 
удовлетворяют шаблону. Если шаблонов несколько, то их можно указать несколькими атрибутами __-e PATTERN__. 
Если шаблон один, то его можно указать первым аргументом команды. Для того, чтобы получить строки исходного файла, которые не 
удовлетворяют шаблону, есть флаг __-v__.

{% codeblock пример grep %}
$ cat example.txt | grep -e Ivan -e Petr
Ivan Ivanov 23
Petr Petrov 43
{% endcodeblock %}

### awk

AWK - это интерпретатор языка для извлечения данных и построения отчетов. Типичная программа на AWK состоит из 
команд вида: PATTERN {ACTION}. Если строка исходного файла удовлетворяет шаблону PATTERN, то выполняется действие ACTION. 
Следующий запрос анализирует лог web-сервера и вычисляет количество запросов вида _/index.html_ в интервале 10:00-11:00:

{% codeblock пример awk lang:bash %}
$ cat access.log | awk '/\/index\.html/ {H=substr($4, 14, 2); if (H>=10 && H<11) C=C+1} END {print C}'
{% endcodeblock %}

В этом запросе есть две команды AWK: первая выполняется если текущая строка содержит _/index.html_, вторая выполняется в 
том случае, если это последняя строка в файле.

### sed

SED - также как и AWK интерпретирует команды на специальном языке для манипуляции строками исходного файла. 
Среди команд sed: замена (substitute), удаление (delete), замена (change) и т.д. 

{% codeblock пример sed: замена пробелов на запятые lang:bash %}
$ cat example.txt | sed 's/ /,/g'
Ivan,Ivanov,23
Petr,Petrov,43
Sergey,Sidorov,17
{% endcodeblock %} 
 
<a href="http://www.grymoire.com/Unix/Sed.html">Здесь</a> можно найти информацию о sed.

### wc

Команда для подсчета статистики по исходному файлу: количество строк (__-l__), слов (__-w__) и символов (__-m__).


## Команды получения данных

При помощи этих команд формируются исходные потоки данных для команд анализа.  

### wget

Получение файла по http, ftp и другим популярным протоколам. По умолчнию, эта команда сохраняет url в файл. Для того,
чтобы она работала как нужно, то есть записывала данные в стандартный поток вывода нужно использовать атрибуты __-q -O -__. 
Атрибут __-q__ означает, что в поток вывода не будет выводиться статистика выполнения __wget__, а __-O -__ означает, что имя файла для
записи не указано, следовательно результат будет записан в поток вывода.

{% codeblock lang:bash %}
$ wget -q -O - http://maksim07.github.com

<!DOCTYPE html>
...
{% endcodeblock %}

### curl

Получение данных по URL. В некоторых дистрибутивах Linux может отсутствовать. 

### cat

Печать файла в поток вывода.

### join

Реляционная операция join для двух файлов.  Можно указать поля в файле по которым осуществляется join. Имеется одно существенное
ограничение - использется алгоритм sort join, следовательно файлы должны быть отсортированы по этим полям. Для подготовки файлов
может пригодиться команда __sort__. В следующем примере осуществляется join двух таблиц из разных БД.

{% codeblock Пример join lang:bash %}
#!/bin/bash

# получение первой таблицы в файл employees.data: идентификатор, имя сотрудника, идентификатор департамента
echo 'select id, name, depid from employees order by depid' | mysql database1 > employees.data

# получение второй таблицы в файл departments.data: идентификатор департамента, название 
echo 'select id, name from department order by id' | mysql database2 > departments.data

# join двух файлов по идентификатору департамента. В результате получаем таблицу вида:
# идентификатор департамента (ключ для join), все поля первого файлв без ключа (id и имя пользователя)
# все поля второго файла без ключа (название департамента) Пример результата:
# 1 1 Petrov IT
# 1 2 Sidorov IT
# 2 3 Ivanov Accounting
join -t " " -1 3 -2 1 employees.data departments.data 

{% endcodeblock %}

### mysql, psql и т.д.

Клиенты mysql и postgresql для получения данных из реляционных БД.



