---
layout: post
title: "Bash QL: Часть 1 - Основные команды"
date: 2012-12-19 10:41
comments: true
categories: [bash, sql, data analysis, linux, bash ql]
---
Под словами Bash Query Language (Bash QL) я подразумеваю команды bash, 
которые можно использовать для получения и анализа данных. Bash QL - это удобный и функциональный инструмент,
который всегда под рукой, ведь для его использования достаточно открыть терминал. 

<!--more-->

Вот два примера использования Bash QL для анализа логов web-сервера:

{% codeblock Фрагмент лога %}
...
127.0.0.1 - - [07/Mar/2004:16:06:51 -0400] "GET /index.html HTTP/1.1" 200 4523
10.10.0.1 - - [07/Mar/2004:16:06:52 -0400] "GET /main.html HTTP/1.1" 200 42234
10.10.0.21 - - [07/Mar/2004:16:06:53 -0400] "GET /01.html HTTP/1.1" 200 14234
...
{% endcodeblock %}

Полезный отчет, который можно получить по этому логу - выявление ботов на основании количества запросов, 
сделанных с одного IP-адреса. Например, будем считать, что если с одного IP сделано больше 1000 запросов, то это робот.

{% codeblock Выявление ботов lang:bash %}
$ cat access.log | awk '{print $1}' | sort | uniq -c | awk '{if($1 > 1000) print $0}' | sort -n
2311 10.0.0.10
14351 10.0.0.11
53312 127.0.0.1
{% endcodeblock %}

В этом примере мы получили ip-адреса трех ботов и количество сгенерированных ими запросов к web-серверу.

В следующем примере по логам формируется отчет по ошибкам:

{% codeblock Отчет по ошибкам http lang:bash %}
$ cat access.log | awk '{if ($9 != 200) print $9}' | sort | uniq -c | sort -n
12 500
3234 404
{% endcodeblock %}

Команды Bash SQL можно разделить на две категории: команды получения данных и команды анализа данных. 
Далее перечислены основные команды из обеих категорий. 

## Команды анализа данных

Будем считать, что всем этим командам данные передаются в стандартный ввод, хотя большиноство из них можно использовать иначе. 
Чтобы получить данные для анализа нужно использовать команды получения данных.

### sort

Эта команда позволяет отсортировать строки исходного файла. Если указать флаг __-n__, то строки будут сортироваться в соответствие
со своим числовым значением.

### uniq

Если в исходном файле строка повторяется, то эта команда оставит только одну из повторяющихся строк. С флагом __-c__ в вывод команды 
также добавляется количество повторяющихся слов.

### head & tail

Команды позволяют получить начало или конец исходного файла.

### grep

Пожалуй самая популярная команда для анализа данных. Она позволяет отфильтровать исходный файл - оставить в нем только те строки, которые 
удовлетворяют шаблону.

### awk

AWK - интерпретатор языка для извлечения данных и построения отчетов. Типичная программа на AWK состоит из 
команд вида: PATTERN {ACTION}. Если строка исходного файла удовлетворяет шаблону PATTERN, то выполняется действие ACTION. 

### sed

SED - также как и AWK интерпретирует команды на специальном языке для манипуляции строками исходного файла. 




## Команды получения данных

Это команды посредством которых можно доставить данные для анализа из разных источников данных. Другими
словами - при помощи этих команд можно получить поток ввода для команд анализа данных. 

### wget

Получение файла по http, ftp и другим популярным протоколам.

### curl

Получение данных по URL. В некоторых дистрибутивах Linux может отсутствовать. 

### cat

Печать файла в поток вывода.

### join

Реляционная операция join для двух файлов.  Можно указать поля в файле по которым осуществляется join. Имеется одно существенное
ограничение - использется алгоритм sort join, следовательно файлы должны быть отсортированы по этим полям. 

### mysql, psql и т.д.

Клиенты mysql и postgresql для получения данных из реляционных БД.

