<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash ql | maksim07's blog]]></title>
  <link href="http://maksim07.github.com/blog/categories/bash-ql/atom.xml" rel="self"/>
  <link href="http://maksim07.github.com/"/>
  <updated>2012-12-22T20:18:58+04:00</updated>
  <id>http://maksim07.github.com/</id>
  <author>
    <name><![CDATA[maksim07]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash QL: Часть 1 - Основные команды]]></title>
    <link href="http://maksim07.github.com/blog/2012/12/19/bash-ql-chast-1-osnovnyie-komandy/"/>
    <updated>2012-12-19T10:41:00+04:00</updated>
    <id>http://maksim07.github.com/blog/2012/12/19/bash-ql-chast-1-osnovnyie-komandy</id>
    <content type="html"><![CDATA[<p>Среди команд Linux есть много инструментов, которые можно эффективно использовать для
извлечения и анализа данных. Можно сказать, что эти команды образуют язык запросов - bash query language.
На этом языке можно разрабатывать целые программы по обработке данных, его очень просто использовать -
для этого достаточно открыть терминал. В этой статье я расскажу о базовых командах Bash QL, более подробную
информацию можно найти в мануалах Linux.</p>

<!--more-->


<p>Для иллюстрации возможностей Bash QL рассмотрим два примера. В обоих случаях анализируется лог web-сервера,
например nginx:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>фрагмент лога </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>127.0.0.1 - - [07/Mar/2004:16:06:51 -0400] "GET /index.html HTTP/1.1" 200 4523
</span><span class='line'>10.10.0.1 - - [07/Mar/2004:16:06:52 -0400] "GET /main.html HTTP/1.1" 200 42234
</span><span class='line'>10.10.0.21 - - [07/Mar/2004:16:06:53 -0400] "GET /01.html HTTP/1.1" 200 14234
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Полезный отчет, который можно получить по этому логу - выявление ботов на основании количества запросов,
сделанных с одного IP-адреса. Например, будем считать, что если с одного IP сделано больше 1000 запросов, то это робот.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>выявление ботов  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat access.log | awk <span class="s1">&#39;{print $1}&#39;</span> | sort | uniq -c | awk <span class="s1">&#39;{if($1 &gt; 1000) print $0}&#39;</span> | sort -n
</span><span class='line'>2311 10.0.0.10
</span><span class='line'>14351 10.0.0.11
</span><span class='line'>53312 127.0.0.1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>В этом примере мы получили ip-адреса трех ботов и количество сгенерированных ими запросов к web-серверу.</p>

<p>В следующем примере по логам формируется отчет по ошибкам:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>отчет по ошибкам http  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat access.log | awk <span class="s1">&#39;{if ($9 != 200) print $9}&#39;</span> | sort | uniq -c | sort -n
</span><span class='line'>12 500
</span><span class='line'>3234 404
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Команды Bash SQL можно разделить на две категории: команды получения данных и команды анализа данных.
Запрос на Bash QL начинается с команды получения данных и содержит несколько команд анализа данных, который объеденены
в конвейер. В предыдущем примере запрос начинается командой получения данных их файла <strong>cat</strong>, данные которой обрабатываются
командами анализа данных <strong>awk</strong>, <strong>sort</strong> и <strong>uniq</strong>.</p>

<p><blockquote><p>QUERY ::= DATA_COMMAND (| ANALYSIS_COMMAND)* [> OUTPUT_FILE]</p></blockquote></p>

<p>Далее перечислены основные команды из обеих категорий.</p>

<h2>Команды анализа данных</h2>

<p>Будем считать, что всем этим командам данные передаются в стандартный ввод, хотя большиноство из них можно использовать иначе.
Результат своей работы эти команды отправляют на стандартный поток вывода.
Чтобы получить данные для анализа нужно использовать команды получения данных.</p>

<h3>sort</h3>

<p>Эта команда позволяет отсортировать строки исходного файла. Если указать флаг <strong>-n</strong>, то строки будут сортироваться в соответствие
со своим числовым значением. Можно сортировать по одному полю или по диапазону полей при поможи опций <strong>-k POS</strong> и <strong>-t SEP</strong>. Для обратной
сортировки есть флаг <strong>-r</strong>.
По умолчанию, исходный файл воспринимается как таблица с одной колонкой.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Пример сортировки (по возрасту)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat example.txt
</span><span class='line'>Ivan Ivanov 23
</span><span class='line'>Petr Petrov 43
</span><span class='line'>Sergey Sidorov 17
</span><span class='line'><span class="nv">$ </span>cat example.txt | sort -n -k 3 -t <span class="s2">&quot; &quot;</span>
</span><span class='line'>Sergey Sidorov 17
</span><span class='line'>Ivan Ivanov 23
</span><span class='line'>Petr Petrov 43
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>uniq</h3>

<p>Если в исходном файле строка повторяется, то эта команда оставит только одну из повторяющихся строк. С флагом <strong>-c</strong> в вывод команды
также добавляется количество повторяющихся слов.</p>

<h3>head &amp; tail</h3>

<p>Команды позволяют получить начало или конец исходного файла. Атрибут <strong>-n COUNT</strong> позволяет указать количество строк.</p>

<h3>grep</h3>

<p>Пожалуй самая популярная команда для анализа данных. Она позволяет отфильтровать исходный файл - оставить в нем только те строки, которые
удовлетворяют шаблону. Если шаблонов несколько, то их можно указать несколькими атрибутами <strong>-e PATTERN</strong>.
Если шаблон один, то его можно указать первым аргументом команды. Для того, чтобы получить строки исходного файла, которые не
удовлетворяют шаблону, есть флаг <strong>-v</strong>.</p>

<h3>awk</h3>

<p>AWK - интерпретатор языка для извлечения данных и построения отчетов. Типичная программа на AWK состоит из
команд вида: PATTERN {ACTION}. Если строка исходного файла удовлетворяет шаблону PATTERN, то выполняется действие ACTION.
Слудующий запрос анализирует лог web-сервера и вычисляет количество запросов вида <em>/index.html</em> в интервале 10:00-11:00:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat access.log | awk <span class="s1">&#39;/\/index.html/ {H=substr($4, 14, 2); if (H&gt;=10 &amp;amp;&amp;amp; H&amp;lt;11) C=C+1} END {print C}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Здесь есть две команды AWK: первая выполняется если текущая строка содержит <em>/index.html</em>, вторая выполняется в
том случае, если строка последняя в этом файле.</p>

<h3>sed</h3>

<p>SED - также как и AWK интерпретирует команды на специальном языке для манипуляции строками исходного файла.
<a href="http://www.grymoire.com/Unix/Sed.html">Здесь</a> можно найти информацию о sed.</p>

<h3>wc</h3>

<p>Команда для подсчета статистики по исходному файлу: количество строк (<strong>-l</strong>), слов (<strong>-w</strong>) и символов (<strong>-m</strong>).</p>

<h2>Команды получения данных</h2>

<p>Это команды посредством которых можно доставить данные для анализа из разных источников данных. Другими
словами - при помощи этих команд можно получить поток ввода для команд анализа данных.</p>

<h3>wget</h3>

<p>Получение файла по http, ftp и другим популярным протоколам. По умолчнию, эта команда сохраняет url в файл. Для того,
чтобы она работала как нужно, тоесть записывала данные в стандартный поток вывода нужно использовать атрибуты <strong>-q -O -</strong>.
Атрибут <strong>-q</strong> означает, что в поток вывода не будет выводиться статистика выполнения <strong>wget</strong>, а <strong>-O -</strong> означает что имя файла для
записи на указано, следовательно результат будет записан в поток вывода.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -q -O - http://maksim07.github.com&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&amp;lt;!DOCTYPE html&gt;
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>curl</h3>

<p>Получение данных по URL. В некоторых дистрибутивах Linux может отсутствовать.</p>

<h3>cat</h3>

<p>Печать файла в поток вывода.</p>

<h3>join</h3>

<p>Реляционная операция join для двух файлов.  Можно указать поля в файле по которым осуществляется join. Имеется одно существенное
ограничение - использется алгоритм sort join, следовательно файлы должны быть отсортированы по этим полям. Для подготовки файлов
может пригодиться команда <strong>sort</strong>. В следующем примере осуществляется join двух таблиц из разных БД.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Пример join  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;получение первой таблицы в файл employees.data: идентификатор, имя сотрудника, идентификатор департамента&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo <span class="s1">&#39;select id, name, depid from employees order by depid&#39;</span> | mysql database1 &gt; employees.data&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;получение второй таблицы в файл departments.data: идентификатор департамента, название&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo <span class="s1">&#39;select id, name from department order by id&#39;</span> | mysql database2 &gt; departments.data&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;join двух файлов по идентификатору департамента. В результате получаем таблицу вида:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;идентификатор департамента <span class="o">(</span>ключ для join<span class="o">)</span>, все поля первого файлв без ключа <span class="o">(</span>id и имя пользователя<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;все поля второго файла без ключа <span class="o">(</span>название департамента<span class="o">)</span> Пример результата:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;1 1 Petrov IT&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;1 2 Sidorov IT&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;2 3 Ivanov Accounting&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;join -t <span class="s2">&quot; &quot;</span> -1 3 -2 1 employees.data departments.data&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>mysql, psql и т.д.</h3>

<p>Клиенты mysql и postgresql для получения данных из реляционных БД.</p>
]]></content>
  </entry>
  
</feed>
